// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  password               String
  name                   String?
  role                   Role                     @default(USER)
  aiSuggestionsUsed      Int                      @default(0)
  aiSuggestionsResetDate DateTime?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  questions              Question[]
  comments               Comment[]
  blogs                  Blog[]
  personalQuestions      PersonalQuestion[]
  bVisaPersonalQuestions BVisaPersonalQuestion[]
  userMemberships        UserMembership[]
  payments               Payment[]
}

enum Role {
  USER
  ADMIN
}

model VisaInfo {
  id            String    @id @default(uuid())
  title         String
  type          VisaType
  content       String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum VisaType {
  F_VISA
  B_VISA
}

model FAQ {
  id            String    @id @default(uuid())
  question      String
  answer        String    @db.Text
  category      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
}

model FVisaQuestion {
  id            String    @id @default(uuid())
  question      String
  answer        String    @db.Text
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model BVisaQuestion {
  id            String    @id @default(uuid())
  question      String
  answer        String    @db.Text
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PersonalQuestion {
  id            String    @id @default(uuid())
  question      String
  answer        String    @db.Text
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model BVisaPersonalQuestion {
  id            String    @id @default(uuid())
  question      String
  answer        String    @db.Text
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Question {
  id            String    @id @default(uuid())
  title         String
  content       String    @db.Text
  status        QuestionStatus @default(PENDING)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Comment {
  id            String    @id @default(uuid())
  content       String    @db.Text
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId    String?
  question      Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  faqId         String?
  faq           FAQ?      @relation(fields: [faqId], references: [id], onDelete: Cascade)
  videoId       String?
  video         Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Blog {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  content       String    @db.Text
  summary       String?   @db.Text
  published     Boolean   @default(false)
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Video {
  id            String    @id @default(uuid())
  title         String
  description   String?   @db.Text
  url           String
  thumbnail     String?
  duration      Int?      // in seconds
  published     Boolean   @default(true)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
}

model Membership {
  id            String    @id @default(uuid())
  name          String
  description   String?   @db.Text
  price         Decimal   @db.Decimal(10, 2)
  duration      Int       // in days
  features      String[]  // JSON array of features
  active        Boolean   @default(true)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userMemberships UserMembership[]
  payments      Payment[]
}

model UserMembership {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId  String
  membership    Membership  @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime
  status        MembershipStatus @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, membershipId, startDate])
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model Payment {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId  String?
  membership    Membership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
  amount        Decimal     @db.Decimal(10, 2)
  currency      String      @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?     @unique
  paymentData   Json?       // Store payment provider specific data
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum PaymentMethod {
  ALIPAY
  WECHAT
  VISA
  MASTERCARD
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model File {
  id            String    @id @default(uuid())
  name          String
  originalName  String
  description   String?   @db.Text
  filePath      String    // Storage path or URL
  fileSize      BigInt    // File size in bytes
  mimeType      String
  category      String?   // File category for organization
  downloadCount Int       @default(0)
  published     Boolean   @default(true)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
